/* div {
  width: 300px;
  height: 200px;
} */
* {
  background-color: #2f3e46;
}

h1 {
  background-color: #457b9d;
  color: #f6bd60;
  width: 50%;

  /* Padding values: top | right | bottom | left */
  padding: 10px 20px 30px 40px;
}
div {
  width: 75%;
}
#first {
  margin-bottom: 1rem;
  background-color: #1d3557;
  color: #a8dadc;
  border-width: 3px;
  border-color: #f6bd60;
  border-style: solid;

  /* short hand */
  /* border: 5px solid black;  */
  /* Box sizing border box takes the size of the container, does not extend beyond that. */
  /* For 300px div and border 5px, the box will be 310px. But with box sizing, it will remain 300px and border thickness will be subtracted */
  box-sizing: border-box;
}
#second {
  background-color: #457b9d;
  color: #fff;
}
#third {
  margin: 2rem;
  background-color: #a8dadc;
  color: #1d3557;
  border: 2px solid #fb8b24;
  border-radius: 10px;
  /* Padding values: vertical | horizontal */
  padding: 20px 30px;
}

h2 {
  display: inline;
  background-color: darkolivegreen;
  border: 1px solid orangered;
  padding: 10px;
  margin-left: 20px;
}

/* For inline elements, margin, height, width do not work. You have to set the elements to inline-block */
.display-div {
  display: inline-block;
  background-color: darkseagreen;
  padding: 10px 20px;
  margin: 30px;
}

.position {
  width: 100px;
  height: 100px;
  display: inline-block;
  background-color: darkorange;
  border: 2px solid black;
  margin: 20px;
}
#middle {
  background-color: #f6bd60;
}

#static #middle {
  position: static;
  top: 100px;
}

/* The element is positioned according to the normal flow of the document, and then offset relative to itself based on the values of top, right, bottom, and left. The offset does not affect the position of any other elements; thus, the space given for the element in the page layout is the same as if position were static. */
#relative #middle {
  position: relative;
  top: 50px;
  left: 50px;
}

/* The element is removed from the normal document flow, and no space is created for the element in the page layout. It is positioned relative to its closest positioned ancestor, if any; otherwise, it is placed relative to the initial containing block. Its final position is determined by the values of top, right, bottom, and left. */
#absolute {
  position: relative;
}
#absolute #middle {
  position: absolute;
  top: 50px;
  left: 50px;
}
#fixed #middle {
  position: fixed;
  top: 0;
  left: 750px;
  transition: 1s;
}

#fixed #middle:hover {
  border-radius: 50%;
}
